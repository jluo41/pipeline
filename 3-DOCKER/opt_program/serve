#!/usr/bin/env python

# This file implements the scoring service shell. You don't necessarily need to modify it for various
# algorithms. It starts nginx and gunicorn with the correct configurations and then simply waits until
# gunicorn exits.
#
# The flask server is specified to be the app object in wsgi.py
#
# We set the following parameters:
#
# Parameter                Environment Variable              Default Value
# ---------                --------------------              -------------
# number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
# timeout                  MODEL_SERVER_TIMEOUT              60 seconds

# Import necessary modules
import multiprocessing
import os
import signal
import subprocess
import sys

# Get the number of CPU cores
cpu_count = multiprocessing.cpu_count()

# Set the model server timeout and number of workers
# If environment variables are not set, use default values
model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', cpu_count))

# Define a function to handle SIGTERM signal
def sigterm_handler(nginx_pid, gunicorn_pid):
    # Try to gracefully stop nginx
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    # Try to gracefully stop gunicorn
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    # Exit the script
    sys.exit(0)

# Explanation of concepts used in this function:
# 1. Signal Handling: The function is designed to handle the SIGTERM signal, which is typically used to request a process to terminate gracefully.
# 2. Process Management: It deals with stopping two separate processes (nginx and gunicorn) using their process IDs (PIDs).
# 3. Exception Handling: Try-except blocks are used to catch and ignore OSError exceptions that might occur if the processes are already stopped.
# 4. OS-level Operations: The function uses os.kill() to send signals to processes, demonstrating interaction with the operating system.
# 5. Signal Types: Different signals (SIGQUIT for nginx, SIGTERM for gunicorn) are used, showing awareness of process-specific termination methods.
# 6. Graceful Shutdown: The function attempts to stop processes gracefully, which is a good practice in server management.
# 7. Script Termination: sys.exit(0) is used to exit the script cleanly after handling the processes.

# Define the main function to start the server
def start_server():
    print('Starting the inference server with {} workers.'.format(model_server_workers))

    # Redirect nginx logs to stdout and stderr
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    # Start nginx process
    nginx = subprocess.Popen(['nginx', '-c', '/opt/program/nginx.conf'])
    
    # Start gunicorn process
    gunicorn = subprocess.Popen(['gunicorn',
                                 '--timeout', str(model_server_timeout),
                                 '-k', 'sync',
                                 '-b', 'unix:/tmp/gunicorn.sock',
                                 '-w', str(model_server_workers),
                                 'wsgi:app'])

    # Set up SIGTERM handler
    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # Monitor child processes
    pids = set([nginx.pid, gunicorn.pid])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    # If we break out of the loop, terminate the processes
    sigterm_handler(nginx.pid, gunicorn.pid)
    print('Inference server exiting')

# Main execution
if __name__ == '__main__':
    start_server()
